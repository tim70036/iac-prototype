Parameters:
  NetworkStack: 
    Type: String
    Description: The name of the network stack to use. If you have not created a network stack, create one first.
    Default: network-stack
  WebServerInstanceType:
      Description: Web Server EC2 instance type
      Type: String
      Default: t3.micro
      AllowedValues:
        - t3.nano
        - t3.micro
        - t3.small
        - t3.medium
        - t3.large
      ConstraintDescription: must be a valid EC2 instance type.
  PayServerInstanceType:
      Description: Pay Server EC2 instance type
      Type: String
      Default: t3.micro
      AllowedValues:
        - t3.nano
        - t3.micro
        - t3.small
        - t3.medium
        - t3.large
      ConstraintDescription: must be a valid EC2 instance type.
  EC2AMI:
    Description: EC2 AMI to use for the instance
    Type: 'AWS::EC2::Image::Id'
  EC2KeyPairName:
      Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
      Type: 'AWS::EC2::KeyPair::KeyName'
      ConstraintDescription: Can contain only ASCII characters.

Resources:
  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: web-server-target-group
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '30'
      VpcId:
        Fn::ImportValue: !Sub '${NetworkStack}-VPCId'

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: web-server-alb
      Type: application
      Scheme: internet-facing
      Subnets: !Split [',', Fn::ImportValue: !Sub '${NetworkStack}-SubnetIds']
      SecurityGroups:
        - Fn::ImportValue: !Sub '${NetworkStack}-ALBSecurityGroup'
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
        - Key: client_keep_alive.seconds
          Value: '3600'
        - Key: access_logs.s3.enabled
          Value: false

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebServerTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn:
            Fn::ImportValue: !Sub ${NetworkStack}-SSLCertificateArn

  # TODO: remove the following resources
  TestALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebServerTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        ImageId: !Ref EC2AMI
        InstanceType: !Ref WebServerInstanceType
        KeyName: !Ref EC2KeyPairName
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              DeleteOnTermination: true
              Encrypted: false
              VolumeType: gp3
              Iops: 3000
              Throughput: 125
              VolumeSize: 20
        SecurityGroupIds: 
          - Fn::ImportValue: !Sub '${NetworkStack}-WebServerSecurityGroup'
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt update -y
            sudo apt install apache2=2.4.41-4ubuntu3.20
            sudo systemctl start apache2
            sudo systemctl enable apache2
            sudo apt -y install ca-certificates apt-transport-https software-properties-common
            sudo add-apt-repository -y ppa:ondrej/php
            sudo apt install -y php8.1
            sudo apt install -y php8.1 libapache2-mod-php8.1 php8.1-gd php8.1-mysql php8.1-curl php8.1-mbstring php8.1-intl
            sudo apt install -y php8.1-gmp php8.1-bcmath php8.1-imagick php8.1-xml php8.1-zip
            sudo a2enmod php8.1
            sudo systemctl restart apache2
            sudo echo "<?php phpinfo(); ?>" | sudo tee /var/www/html/index.php
  
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: web-server-asg
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: '1'
      DesiredCapacity: '1'
      MinSize: '1'
      TargetGroupARNs:
        - !Ref WebServerTargetGroup
      AvailabilityZones:
        - Fn::ImportValue: !Sub '${NetworkStack}-AvailabilityZone'
      DefaultInstanceWarmup: 30
      Tags: 
        - Key: Name
          Value: web-server
          PropagateAtLaunch: true

  PayServerEC2:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      InstanceType: !Ref PayServerInstanceType
      AvailabilityZone:
        Fn::ImportValue: !Sub '${NetworkStack}-AvailabilityZone'
      SecurityGroupIds:
        - Fn::ImportValue: !Sub '${NetworkStack}-PayServerSecurityGroup'
        - Fn::ImportValue: !Sub '${NetworkStack}-DevWhitelistSecurityGroup'
      Tags:
        - Key: Name
          Value: pay-server

  PayServerEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref PayServerEC2

Outputs:
  WebServerAddress:
    Description: The URL of the web server
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}/index.php'
  PayServerAddress:
    Description: The URL of the pay server
    Value: !Sub 'http://${PayServerEIP.PublicIp}/index.php'